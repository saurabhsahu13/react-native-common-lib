{"version":3,"sources":["../../../lib/commonHelpers/index.js"],"names":["GlobalColors","ExampleColors","GlobalTextStyles","CommonAssets","config","capitalizeFirstLetter","word","toUpperCase","slice","getColorFromString","colorToReturn","Colors","color","console","warn","getDisabledColorFromString","disabledColorToReturn","TextStyles","textStylesConfig","CreateTextStyles","allTextStyles","DefaultTextStyles","getGlobalColors","getGlobalTextStyles","nToPercent","n","widthOrHeight","percent","WIDTH","HEIGHT","DefaultCommonAssets","getImageSource","image","uri","Error"],"mappings":"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","file":"index.js","sourcesContent":["import { memoize } from \"underscore\";\nimport { ExampleColors } from \"../../example\";\nimport {\n  CreateTextStyles,\n  DefaultTextStyles,\n  WIDTH,\n  HEIGHT,\n} from \"../commonAssets\";\n\nlet GlobalColors = ExampleColors;\nlet GlobalTextStyles = {};\n\nclass CommonAssets {\n  constructor(config = {}) {\n    const { Colors, TextStyles, textStylesConfig } = config;\n\n    this.Colors = Colors || ExampleColors;\n    this.TextStyles =\n      TextStyles || textStylesConfig\n        ? new CreateTextStyles(textStylesConfig).allTextStyles\n        : DefaultTextStyles.allTextStyles;\n\n    GlobalColors = {\n      ...this.Colors,\n    };\n\n    GlobalTextStyles = {\n      ...this.TextStyles,\n    };\n  }\n\n  get colors() {\n    return this.Colors;\n  }\n\n  get textStyles() {\n    return this.TextStyles;\n  }\n\n  capitalizeFirstLetter = word => word[0].toUpperCase() + word.slice(1);\n\n  getColorFromString = color => {\n    const colorToReturn = this.Colors[color];\n\n    if (colorToReturn) {\n      return colorToReturn;\n    }\n\n    console.warn(`No color in your Colors obj named: ${color}. Please see the README for how to setup Colors.\n\n      Returning the color.`);\n\n    return color;\n  };\n\n  getDisabledColorFromString = color => {\n    const disabledColorToReturn = this.Colors[\n      `disabled${this.capitalizeFirstLetter(color)}`\n    ];\n\n    if (disabledColorToReturn) {\n      return this.Colors[`disabled${this.capitalizeFirstLetter(color)}`];\n    }\n\n    console.warn(\n      `No color found in Colors for disabled${this.capitalizeFirstLetter(\n        color,\n      )}. Returning for ${color} instead. `,\n    );\n\n    return this.getColorFromString(color);\n  };\n}\n\nexport const getGlobalColors = () => GlobalColors;\nexport const getGlobalTextStyles = () => GlobalTextStyles;\nexport const capitalizeFirstLetter = word =>\n  word[0].toUpperCase() + word.slice(1);\n\nexport const getColorFromString = memoize(color => {\n  const colorToReturn = getGlobalColors()[color];\n\n  if (colorToReturn) {\n    return colorToReturn;\n  }\n\n  console.warn(`No color in your Colors obj named: ${color}. Please see the README for how to setup Colors.\n\n      Returning the color: ${color}`);\n\n  return color;\n});\n\nexport const getDisabledColorFromString = memoize(color => {\n  const disabledColorToReturn = getGlobalColors()[\n    `disabled${capitalizeFirstLetter(color)}`\n  ];\n\n  if (disabledColorToReturn) {\n    return getGlobalColors()[`disabled${capitalizeFirstLetter(color)}`];\n  }\n\n  console.warn(\n    `No color found in Colors for disabled${capitalizeFirstLetter(\n      color,\n    )}. Returning for ${color} instead. `,\n  );\n\n  return getColorFromString(color);\n});\n\nexport const nToPercent = (n, widthOrHeight) => {\n  const percent = n / 100;\n\n  if (widthOrHeight === \"width\") {\n    return percent * WIDTH;\n  }\n\n  return percent * HEIGHT;\n};\n\n// to set GlobalColors and GlobalTextStyles\nconst DefaultCommonAssets = new CommonAssets();\n\nexport const getImageSource = memoize(image => {\n  if (typeof image === \"number\") {\n    return image;\n  }\n\n  if (typeof image === \"string\") {\n    return { uri: image };\n  }\n\n  throw new Error(\"Image is neither local or a uri.\");\n});\n\nexport * from \"./defaultRefs\";\nexport * from \"./styleHelpers\";\nexport { CommonAssets, DefaultCommonAssets };\n"]}